
OOP, or Object-Oriented Programming, is a programming paradigm that uses the concept of "objects" to organize code. 
It is based on several key principles and concepts. Here are some of the core OOP concepts:

1.Class:-

A class is a blueprint or template for creating objects.
It defines the properties (attributes) and behaviors (methods) that objects of the class will have.


2.Object:-

An object is an instance of a class.
It represents a real-world entity and encapsulates both data (attributes) and the methods (functions) that operate on the data.


3.Encapsulation:-

Encapsulation is the bundling of data and methods that operate on the data within a single unit, i.e., a class.
It helps in hiding the internal details of how an object's data is implemented and accessed.


4.Inheritance:

Inheritance is a mechanism that allows a new class (subclass/derived class) to inherit properties and behaviors from an existing class (superclass/base class).
It promotes code reuse and establishes a hierarchical relationship between classes.


5.Polymorphism:-

Polymorphism allows objects of different types to be treated as objects of a common type.
It enables a single interface to represent different types, and it can be achieved through method overloading and method overriding.


6.Abstraction:-

Abstraction is the process of simplifying complex systems by modeling classes based on the essential properties and behaviors they share.
It involves focusing on the essential features and ignoring unnecessary details.


7.Method Overloading:-

Method overloading occurs when a class has multiple methods with the same name but different parameters (number, type, or both).
It allows a class to provide multiple methods with the same name for different functionalities.


8.Method Overriding:-

Method overriding happens when a subclass provides a specific implementation for a method that is already defined in its superclass.
It allows a subclass to provide a specialized version of a method defined in its superclass.


9.Constructor:-

A constructor is a special method that is called when an object is instantiated.
It is used to initialize the object's attributes and set up the object's initial state.